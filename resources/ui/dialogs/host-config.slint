import { StandardButton, LineEdit, GridBox, CheckBox, GroupBox, VerticalBox } from "std-widgets.slint";

export struct HostConfigModel {
    name: string,
    http: bool,
    https: bool,
    ssh: bool,
    vnc: bool,
    ipmi: bool,
}

export component HostConfigDialog inherits Dialog {
    title: dialog-title;
    forward-focus: input;
    min-width: 360px;

    in property <string> dialog-title: "主机配置";
    in property <HostConfigModel> input-model;
    in-out property <HostConfigModel> model: {
        name: input.text,
        http: i-http.checked,
        https: i-https.checked,
        ssh: i-ssh.checked,
        vnc: i-vnc.checked,
        ipmi: i-ipmi.checked,
    };
    callback action-ok(HostConfigModel);
    callback action-cancel();

    function update_i_all_status() {
        i-all.checked = i-http.checked && i-https.checked && i-ssh.checked && i-vnc.checked && i-ipmi.checked;
    }

    VerticalBox {
        GroupBox {
            title: "要监控的IP";

            input := LineEdit {
                placeholder-text: "IP";
                text: root.input-model.name;
            }
        }
        GroupBox {
            title: "服务列表";
            GridBox {
                Row {
                    Text {
                        vertical-alignment: center;
                        text: "全部";
                    }
                    i-all := CheckBox {
                        checked: i-http.checked && i-https.checked && i-ssh.checked && i-vnc.checked && i-ipmi.checked;
                        toggled => {
                            i-http.checked = i-all.checked;
                            i-https.checked = i-all.checked;
                            i-ssh.checked = i-all.checked;
                            i-vnc.checked = i-all.checked;
                            i-ipmi.checked = i-all.checked;
                        }
                    }
                }
                Row {
                    Text {
                        vertical-alignment: center;
                        text: "HTTP";
                    }
                    i-http := CheckBox {
                        checked: root.input-model.http;
                        toggled => {
                            root.update_i_all_status();
                        }
                    }
                }
                Row {
                    Text {
                        vertical-alignment: center;
                        text: "HTTPS";
                    }
                    i-https := CheckBox {
                        checked: root.input-model.https;
                        toggled => {
                            root.update_i_all_status();
                        }
                    }
                }
                Row {
                    Text {
                        vertical-alignment: center;
                        text: "SSH";
                    }
                    i-ssh := CheckBox {
                        checked: root.input-model.ssh;
                        toggled => {
                            root.update_i_all_status();
                        }
                    }
                }
                Row {
                    Text {
                        vertical-alignment: center;
                        text: "VNC";
                    }
                    i-vnc := CheckBox {
                        checked: root.input-model.vnc;
                        toggled => {
                            root.update_i_all_status();
                        }
                    }
                }
                Row {
                    Text {
                        vertical-alignment: center;
                        text: "IPMI";
                    }
                    i-ipmi := CheckBox {
                        checked: root.input-model.ipmi;
                        toggled => {
                            root.update_i_all_status();
                        }
                    }
                }
            }
        }
    }
    StandardButton {
        kind: ok;
        clicked => {
            root.action-ok(root.model);
        }
    }
    StandardButton {
        kind: cancel;
        clicked => {
            root.action-cancel();
        }
    }
}